
# TODO: Split pull and build out into a separate role
- name: pull in updates on develop branch
  git: repo={{ airavata_repo }}
       dest={{ airavata_source_dir }}
       version={{ git_branch }}
  when: do_git_pull
  register: git_pull

- name: check for existing distribution tarball
  find:
      paths: "{{ airavata_source_dir }}/modules/distribution/target"
      patterns: "*-bin.tar.gz"
      file_type: file
  register: dist_tarball_file

- name: build the distribution
  command: mvn clean install -DskipTests
  args:
      chdir: "{{ airavata_source_dir }}"
  when: git_pull.changed or dist_tarball_file.matched == 0
  register: dist_build

- name: register the built distribution tarball
  find:
      paths: "{{ airavata_source_dir }}/modules/distribution/target"
      patterns: "*-bin.tar.gz"
      file_type: file
  register: dist_tarball_file

- name: copy new distribution
  copy: remote_src=True src={{ dist_tarball_file.files.0.path }} dest={{ deployment_dir }}
  register: new_distribution
  notify: "restart airavata"

- name: register the currently deployed distribution
  find:
      paths: "{{ deployment_dir }}"
      patterns: "apache-airavata-server-*-SNAPSHOT"
      file_type: directory
  register: old_dist_dir

# TODO Stopping a server, can this be extracted and reused with handler?
# TODO only stop the server if the server is running

- name: stop the server
  shell: "{{ old_dist_dir.files.0.path }}/bin/airavata-server-stop.sh"
  register: stop_airavata
  when: new_distribution.changed and old_dist_dir.matched == 1
  ignore_errors: True

- name: force stop the server
  shell: "{{ old_dist_dir.files.0.path }}/bin/airavata-server-stop.sh -f"
  when: stop_airavata|failed

- name: register the backup distribution
  find:
      paths: "{{ deployment_dir }}"
      patterns: "apache-airavata-server-*bk"
      file_type: directory
  register: backup_dist_dir

- name: remove old backup
  file: path="{{ backup_dist_dir.files.0.path }}" state=absent
  when: new_distribution.changed and backup_dist_dir.matched == 1

- name: backup current distribution
  command: mv "{{ old_dist_dir.files.0.path }}" "{{ old_dist_dir.files.0.path }}bk"
  when: new_distribution.changed and old_dist_dir.matched == 1

- name: remove old distribution
  file: path={{ old_dist_dir.files.0.path }} state=absent
  when: new_distribution.changed and old_dist_dir.matched == 1

- name: untar new distribution
  # unarchive module doesn't like macOS BSD tar
  command: tar zxf {{ new_distribution.dest }}
  args:
    chdir: "{{ deployment_dir }}"
  when: new_distribution.changed

- name: register the new distribution
  find:
      paths: "{{ deployment_dir }}"
      patterns: "apache-airavata-server-*-SNAPSHOT"
      file_type: directory
  register: new_dist_dir

# Assume that the deployment directory has the airavata-server.properties file to use
- name: copy airavata-server.properties
  copy: remote_src=True src="{{ deployment_dir }}/airavata-server.properties" dest={{ new_dist_dir.files.0.path }}/bin/
  notify: "restart airavata"

# Assume that the mysql jar is in the deployment directory
- name: register the mysql jar
  find:
      paths: "{{ deployment_dir }}"
      patterns: "mysql-connector-java-*.jar"
      file_type: file
      recurse: no
  register: mysql_jar

- name: copy mysql
  copy: remote_src=True src="{{ mysql_jar.files.0.path }}" dest={{ new_dist_dir.files.0.path }}/lib/
  notify: "restart airavata"

# Temporary workaround for log4j jars (https://issues.apache.org/jira/browse/AIRAVATA-2205)
- name: register the log4j jars
  find:
      paths: "{{ deployment_dir }}"
      patterns: "slf4j-log4j12*.jar,log4j*.jar"
      file_type: file
      recurse: yes
  register: log4j_jars

- name: remove log4j jars
  file: path={{item.path}} state=absent
  notify: "restart airavata"
  with_items: "{{ log4j_jars.files }}"

# TODO: make sure rabbitmq is started
# Right now locally I do: brew services restart rabbitmq

- name: start server if not running
  find: paths={{ new_dist_dir.files.0.path }}/bin/ patterns="server_start_*"
  register: server_start_file
  changed_when: server_start_file.matched == 0
  notify: "restart airavata"
